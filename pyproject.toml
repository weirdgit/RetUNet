[project]
name = "retunet"
version = "1.0.0"
requires-python = ">=3.9"
description = "nnU-Net is a framework for out-of-the box image segmentation."
readme = "readme.md"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
keywords = [
    'deep learning',
    'image segmentation',
    'semantic segmentation',
    'medical image analysis',
    'medical image segmentation',
    'nnU-Net',
    'nnunet'
]
dependencies = [
    "torch>=2.1.2",
    "acvl-utils>=0.2,<0.3",  # 0.3 may bring breaking changes. Careful!
    "dynamic-network-architectures>=0.2,<0.4",  # 0.3.1 and lower are supported, 0.4 may have breaking changes. Let's be careful here
    "tqdm",
    "timm",
    "einops",
    "dicom2nifti",
    "scipy",
    "batchgenerators>=0.25",
    "numpy",
    "scikit-learn",
    "scikit-image>=0.19.3",
    "SimpleITK>=2.2.1",
    "pandas",
    "graphviz",
    'tifffile',
    'requests',
    "nibabel",
    "matplotlib",
    "seaborn",
    "imagecodecs",
    "yacs"
]


[project.scripts]
RetUNet_plan_and_preprocess = "retunet.experiment_planning.plan_and_preprocess_entrypoints:plan_and_preprocess_entry"
RetUNet_extract_fingerprint = "retunet.experiment_planning.plan_and_preprocess_entrypoints:extract_fingerprint_entry"
RetUNet_plan_experiment = "retunet.experiment_planning.plan_and_preprocess_entrypoints:plan_experiment_entry"
RetUNet_preprocess = "retunet.experiment_planning.plan_and_preprocess_entrypoints:preprocess_entry"
RetUNet_train = "retunet.run.run_training:run_training_entry"
RetUNet_predict_from_modelfolder = "retunet.inference.predict_from_raw_data:predict_entry_point_modelfolder"
RetUNet_predict = "retunet.inference.predict_from_raw_data:predict_entry_point"
RetUNet_convert_old_nnUNet_dataset = "retunet.dataset_conversion.convert_raw_dataset_from_old_nnunet_format:convert_entry_point"
RetUNet_find_best_configuration = "retunet.evaluation.find_best_configuration:find_best_configuration_entry_point"
RetUNet_determine_postprocessing = "retunet.postprocessing.remove_connected_components:entry_point_determine_postprocessing_folder"
RetUNet_apply_postprocessing = "retunet.postprocessing.remove_connected_components:entry_point_apply_postprocessing"
RetUNet_ensemble = "retunet.ensembling.ensemble:entry_point_ensemble_folders"
RetUNet_accumulate_crossval_results = "retunet.evaluation.find_best_configuration:accumulate_crossval_results_entry_point"
RetUNet_plot_overlay_pngs = "retunet.utilities.overlay_plots:entry_point_generate_overlay"
RetUNet_download_pretrained_model_by_url = "retunet.model_sharing.entry_points:download_by_url"
RetUNet_install_pretrained_model_from_zip = "retunet.model_sharing.entry_points:install_from_zip_entry_point"
RetUNet_export_model_to_zip = "retunet.model_sharing.entry_points:export_pretrained_model_entry"
RetUNet_move_plans_between_datasets = "retunet.experiment_planning.plans_for_pretraining.move_plans_between_datasets:entry_point_move_plans_between_datasets"
RetUNet_evaluate_folder = "retunet.evaluation.evaluate_predictions:evaluate_folder_entry_point"
RetUNet_evaluate_simple = "retunet.evaluation.evaluate_predictions:evaluate_simple_entry_point"
RetUNet_convert_MSD_dataset = "retunet.dataset_conversion.convert_MSD_dataset:entry_point"

[project.optional-dependencies]
dev = [
    "black",
    "ruff",
    "pre-commit"
]

[build-system]
requires = ["setuptools>=67.8.0"]
build-backend = "setuptools.build_meta"

[tool.codespell]
skip = '.git,*.pdf,*.svg'
#
# ignore-words-list = ''
